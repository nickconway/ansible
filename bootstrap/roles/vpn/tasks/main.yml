---
# tasks file for vpn

- name: Check for VPN File
  stat:
    path: ~/.vpn
  register: vpn

- block:
    - name: Check if Already Installed
      shell:
        cmd: command -v tailscale
      register: tailscale_installed
      changed_when: false
      ignore_errors: true

    - name: Check if Already Connected
      shell:
        cmd: tailscale status
      register: tailscale_connected
      ignore_errors: true

    - name: Check for Server File
      stat:
        path: ~/.server
      register: server

    - name: Check for Client-Server File
      stat:
        path: ~/.client-server
      register: client_server

    - name: Check for Mobile File
      stat:
        path: ~/.mobile
      register: mobile

    - name: Check for DNS File
      stat:
        path: ~/.dns
      register: dns

    - name: Check for Subnet-Router File
      stat:
        path: ~/.subnet-router
      register: subnet_router

    - name: Check for Work File
      stat:
        path: ~/.work
      register: work

    - name: Create Default Flags
      set_fact:
        flags: "--ssh --operator={{ ansible_env.USER }} --auth-key '{{ vpn_key }}'"

    - name: Add Client-Server Flags
      set_fact:
        flags: "{{ flags }} --advertise-tags=tag:server,tag:client"
      when: "client_server.stat.exists"

    - name: Add Server Flags
      set_fact:
        flags: "{{ flags }} --advertise-tags=tag:server"
      when: "server.stat.exists"

    - name: Add Client Flags
      set_fact:
        flags: "{{ flags }} --advertise-tags=tag:client"
      when:
        - "not client_server.stat.exists"
        - "not server.stat.exists"

    - name: Add DNS False Flags
      set_fact:
        flags: "{{ flags }} --accept-dns=false"
      when: not mobile.stat.exists or dns.stat.exists

    - name: Add DNS Flags
      set_fact:
        flags: "{{ flags }} --accept-dns=true"
      when: mobile.stat.exists or not dns.stat.exists

    - name: Add Subnet Router Flags
      set_fact:
        flags: "{{ flags }} --advertise-routes=10.0.10.2/32"
      when: "subnet_router.stat.exists"

    - name: Add Accept Routes Flags
      set_fact:
        flags: "{{ flags }} --accept-routes=true"
      when: mobile.stat.exists

    - name: Add Accept Routes False Flags
      set_fact:
        flags: "{{ flags }} --accept-routes=false"
      when: not mobile.stat.exists or subnet_router.stat.exists

    - name: Add Work Flags
      set_fact:
        flags: "{{ flags }} --advertise-tags=tag:work"
      when: work.stat.exists

    - name: Install Tailscale
      become: true
      shell:
        cmd: curl -fsSL https://tailscale.com/install.sh | sh
      changed_when: false

    - name: Enable IP Forwarding
      become: true
      lineinfile:
        create: true
        path: /etc/sysctl.d/99-tailscale.conf
        line: "{{ item }}"
      loop:
        - net.ipv4.ip_forward = 1
        - net.ipv6.conf.all.forwarding = 1
      when: "subnet_router.stat.exists"

    - name: Reload Sysctl
      become: true
      shell:
        cmd: sysctl -p /etc/sysctl.d/99-tailscale.conf
      when: "dns.stat.exists"
      changed_when: false

    - name: Connect to VPN
      become: true
      shell:
        cmd: tailscale up {{ flags }}
      changed_when: false
      when: tailscale_installed.failed or not tailscale_connected.failed

    - name: Enable Auto-Updates
      become: true
      shell:
        cmd: tailscale set --auto-update
      changed_when: false
      ignore_errors: true

    - name: Install Networkd Dispatcher
      become: true
      package: pkg=networkd-dispatcher
      when: "subnet_router.stat.exists"

    - name: Optimize Subnet Routers
      become: true
      shell:
        cmd: |
          NETDEV=$(ip route show 0/0 | cut -f5 -d' ')
          ethtool -K $NETDEV rx-udp-gro-forwarding on rx-gro-list off
          printf '#!/bin/sh\n\nethtool -K %s rx-udp-gro-forwarding on rx-gro-list off \n' "$(ip route show 0/0 | cut -f5 -d" ")" | tee /etc/networkd-dispatcher/routable.d/50-tailscale
          chmod 755 /etc/networkd-dispatcher/routable.d/50-tailscale
          /etc/networkd-dispatcher/routable.d/50-tailscale
          test $? -eq 0 || echo 'An error occurred.'
      changed_when: false
      when: "subnet_router.stat.exists"
  when: "vpn.stat.exists"
